"""
Auto-generated pytest tests from SysML V2 requirements

Generated from: SysML V2 Model
Requirements count: 4
Generation timestamp: 2025-10-07T20:42:42.638890

DO NOT EDIT THIS FILE MANUALLY
"""

import pytest
from hypothesis import given, assume, strategies as st

from examples.system.christmas_tree import (

    validate_tree_height,

    validate_ornament_count,

    validate_lights_power,

    validate_tree_stability,

)



# SYSML2PYTEST-METADATA-START
# requirement_id: REQ-001
# requirement_name: TreeHeightRequirement
# content_hash: b21396981cdb9d5686a7a748438702267f08ce5c3ceb9cda134ef782c3bdf9e5
# version: 1
# generated_at: 2025-10-07T20:42:42.647622
# generator_version: 0.1.0
# SYSML2PYTEST-METADATA-END

# SYSML2PYTEST-GENERATED-START
@pytest.mark.requirement(id="REQ-001", name="TreeHeightRequirement", version=1)
@given(
    treeHeight=st.integers(min_value=150, max_value=200)
)
def test_treeheightrequirement(treeHeight):
    """
    The Christmas tree shall be at least 150 cm and maximum 200 cm high.

    Requirement: REQ-001
    
    Postconditions:
        - 150 <= treeHeight and treeHeight <= 200
    
    """

    # SYSML2PYTEST-GENERATED-END

    # SYSML2PYTEST-CUSTOM-START
    # Add your custom test setup, fixtures, or validation here
    # This region will be preserved during sync updates
    # SYSML2PYTEST-CUSTOM-END

    # SYSML2PYTEST-GENERATED-START
    # Verify postconditions (require constraints)
    assert 150 <= treeHeight and treeHeight <= 200

    # SYSML2PYTEST-GENERATED-END


# SYSML2PYTEST-METADATA-START
# requirement_id: REQ-002
# requirement_name: OrnamentCountRequirement
# content_hash: eb8db2d9ac811cac1cfd593bc4f620d528cb54edbd99c633844a52837a129953
# version: 1
# generated_at: 2025-10-07T20:42:42.647846
# generator_version: 0.1.0
# SYSML2PYTEST-METADATA-END

# SYSML2PYTEST-GENERATED-START
@pytest.mark.requirement(id="REQ-002", name="OrnamentCountRequirement", version=1)
@given(
    ornamentCount=st.integers(min_value=20, max_value=100)
)
def test_ornamentcountrequirement(ornamentCount):
    """
    The Christmas tree shall have between 20 and 100 ornaments for proper decoration.

    Requirement: REQ-002
    
    Postconditions:
        - ornamentCount >= 20 and ornamentCount <= 100
    
    """

    # SYSML2PYTEST-GENERATED-END

    # SYSML2PYTEST-CUSTOM-START
    # Add your custom test setup, fixtures, or validation here
    # This region will be preserved during sync updates
    # SYSML2PYTEST-CUSTOM-END

    # SYSML2PYTEST-GENERATED-START
    # Verify postconditions (require constraints)
    assert ornamentCount >= 20 and ornamentCount <= 100

    # SYSML2PYTEST-GENERATED-END


# SYSML2PYTEST-METADATA-START
# requirement_id: REQ-003
# requirement_name: LightsPowerRequirement
# content_hash: 4cafc32f5057e88e09123db19245f6cde31bfd8efde52383293126fceb02ddaa
# version: 1
# generated_at: 2025-10-07T20:42:42.647958
# generator_version: 0.1.0
# SYSML2PYTEST-METADATA-END

# SYSML2PYTEST-GENERATED-START
@pytest.mark.requirement(id="REQ-003", name="LightsPowerRequirement", version=1)
@given(
    powerConsumption=st.floats(min_value=0.0, max_value=500.0, allow_nan=False, allow_infinity=False)
)
def test_lightspowerrequirement(powerConsumption):
    """
    The Christmas tree lights shall consume no more than 500 watts to ensure safety.

    Requirement: REQ-003
    
    Preconditions:
        - powerConsumption >= 0
    
    Postconditions:
        - powerConsumption <= 500.0
    
    """

    # Precondition checks (assume constraints)

    assume(powerConsumption >= 0)


    # SYSML2PYTEST-GENERATED-END

    # SYSML2PYTEST-CUSTOM-START
    # Add your custom test setup, fixtures, or validation here
    # This region will be preserved during sync updates
    # SYSML2PYTEST-CUSTOM-END

    # SYSML2PYTEST-GENERATED-START
    # Verify postconditions (require constraints)
    assert powerConsumption <= 500.0

    # SYSML2PYTEST-GENERATED-END


# SYSML2PYTEST-METADATA-START
# requirement_id: REQ-004
# requirement_name: TreeStabilityRequirement
# content_hash: 251c139ee485827414bb1ce61d2dc977384ce9ed3f5fb1b74e6f8978711db615
# version: 1
# generated_at: 2025-10-07T20:42:42.648090
# generator_version: 0.1.0
# SYSML2PYTEST-METADATA-END

# SYSML2PYTEST-GENERATED-START
@pytest.mark.requirement(id="REQ-004", name="TreeStabilityRequirement", version=1)
@given(
    treeHeight=st.floats(min_value=1.0, max_value=300.0, allow_nan=False, allow_infinity=False)
)
def test_treestabilityrequirement(treeHeight):
    """
    The tree base diameter shall be at least 15% of the tree height for stability.

    Requirement: REQ-004

    Preconditions:
        - treeHeight > 0 and baseDiameter > 0

    Postconditions:
        - baseDiameter >= 0.15 * treeHeight

    """

    # Precondition checks (assume constraints)
    assume(treeHeight > 0)

    # Generate a valid baseDiameter that satisfies the constraint
    baseDiameter = 0.15 * treeHeight

    # SYSML2PYTEST-GENERATED-END

    # SYSML2PYTEST-CUSTOM-START
    # Add your custom test setup, fixtures, or validation here
    # This region will be preserved during sync updates
    # SYSML2PYTEST-CUSTOM-END

    # SYSML2PYTEST-GENERATED-START
    # Verify postconditions (require constraints)
    assert baseDiameter >= 0.15 * treeHeight

    # SYSML2PYTEST-GENERATED-END