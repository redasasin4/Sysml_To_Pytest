"""
Templates for generating pytest test files
"""

from jinja2 import Template


class TestTemplate:
    """Templates for generating pytest tests"""

    # Template for test file header
    FILE_HEADER = Template("""\"\"\"
Auto-generated pytest tests from SysML V2 requirements

Generated from: {{ source_file }}
Requirements count: {{ requirement_count }}
Generation timestamp: {{ timestamp }}

DO NOT EDIT THIS FILE MANUALLY
\"\"\"

import pytest
from hypothesis import given, assume, strategies as st
{% for import_line in custom_imports %}
{{ import_line }}
{% endfor %}
""")

    # Template for property-based test with Hypothesis
    PROPERTY_TEST = Template("""
# SYSML2PYTEST-METADATA-START
# requirement_id: {{ requirement_id }}
# requirement_name: {{ requirement_name }}
# content_hash: {{ content_hash }}
# version: {{ version }}
# generated_at: {{ generated_at }}
# generator_version: {{ generator_version }}
# SYSML2PYTEST-METADATA-END

# SYSML2PYTEST-GENERATED-START
@pytest.mark.requirement(id="{{ requirement_id }}", name="{{ requirement_name }}", version={{ version }})
{% if strategies %}@given(
{%- for param_name, strategy in strategies.items() %}
    {{ param_name }}={{ strategy }}{{ "," if not loop.last else "" }}
{%- endfor %}
)
{% endif %}def test_{{ test_function_name }}({{ param_list }}):
    \"\"\"
    {{ documentation }}

    Requirement: {{ requirement_id }}
    {% if assume_constraints %}
    Preconditions:
    {% for assume in assume_constraints %}    - {{ assume }}
    {% endfor %}{% endif %}
    Postconditions:
    {% for require in require_constraints %}    - {{ require }}
    {% endfor %}
    \"\"\"
{% if assume_constraints %}
    # Precondition checks (assume constraints)
{% for assume_code in assume_constraint_code %}
    {{ assume_code }}
{% endfor %}
{% endif %}
    # SYSML2PYTEST-GENERATED-END

    # SYSML2PYTEST-CUSTOM-START
    # Add your custom test setup, fixtures, or validation here
    # This region will be preserved during sync updates
    # SYSML2PYTEST-CUSTOM-END

    # SYSML2PYTEST-GENERATED-START
    # Get system under test
    {{ system_call }}

    # Verify postconditions (require constraints)
{% for require_code in require_constraint_code %}
    {{ require_code }}
{% endfor %}
    # SYSML2PYTEST-GENERATED-END
""")

    # Template for parametrized test
    PARAMETRIZED_TEST = Template("""
@pytest.mark.requirement(id="{{ requirement_id }}", name="{{ requirement_name }}")
@pytest.mark.parametrize("{{ param_names }}", [
{% for test_case in test_cases %}
    {{ test_case }},
{% endfor %}
])
def test_{{ test_function_name }}_parametrized({{ param_list }}):
    \"\"\"
    {{ documentation }}

    Requirement: {{ requirement_id }}
    \"\"\"
    # Get system under test
    {{ system_call }}

    # Verify constraints
{% for constraint_code in constraint_code %}
    {{ constraint_code }}
{% endfor %}
""")

    # Template for simple assertion test
    SIMPLE_TEST = Template("""
@pytest.mark.requirement(id="{{ requirement_id }}", name="{{ requirement_name }}")
def test_{{ test_function_name }}():
    \"\"\"
    {{ documentation }}

    Requirement: {{ requirement_id }}
    \"\"\"
    # Get system under test
    {{ system_call }}

    # Verify constraint
    {{ constraint_code }}
""")

    # Template for composite requirement test
    COMPOSITE_TEST = Template("""
@pytest.mark.requirement(id="{{ requirement_id }}", name="{{ requirement_name }}")
class Test{{ class_name }}:
    \"\"\"
    Composite requirement test suite

    {{ documentation }}

    Nested requirements:
    {% for nested in nested_requirements %}    - {{ nested }}
    {% endfor %}
    \"\"\"

{% for sub_test in sub_tests %}
    {{ sub_test }}
{% endfor %}
""")

    @staticmethod
    def render_file_header(source_file: str, requirement_count: int, timestamp: str, custom_imports: list = None) -> str:
        """Render file header"""
        return TestTemplate.FILE_HEADER.render(
            source_file=source_file,
            requirement_count=requirement_count,
            timestamp=timestamp,
            custom_imports=custom_imports or []
        )

    @staticmethod
    def render_property_test(
        requirement_id: str,
        requirement_name: str,
        test_function_name: str,
        documentation: str,
        strategies: dict,
        param_list: str,
        assume_constraints: list,
        require_constraints: list,
        assume_constraint_code: list,
        require_constraint_code: list,
        system_call: str,
        content_hash: str = "",
        version: int = 1,
        generated_at: str = "",
        generator_version: str = "0.1.0"
    ) -> str:
        """Render property-based test"""
        from datetime import datetime
        if not generated_at:
            generated_at = datetime.now().isoformat()

        return TestTemplate.PROPERTY_TEST.render(
            requirement_id=requirement_id,
            requirement_name=requirement_name,
            test_function_name=test_function_name,
            documentation=documentation,
            strategies=strategies,
            param_list=param_list,
            assume_constraints=assume_constraints,
            require_constraints=require_constraints,
            assume_constraint_code=assume_constraint_code,
            require_constraint_code=require_constraint_code,
            system_call=system_call,
            content_hash=content_hash,
            version=version,
            generated_at=generated_at,
            generator_version=generator_version
        )
